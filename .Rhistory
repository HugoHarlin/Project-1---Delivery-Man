pred <- predict(model.fit,newdata=data.frame(x1=xs1,x2=xs2),type="response")
if (pred>.5)
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(1,0,0,0.5),border=NA)
}
else
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(0,0,1,0.5),border=NA)
}
}
}
for (xs1 in seq(0,10,res))
# plot the data
points(x1[y==0],x2[y==0],pch=16,col="blue"); points(x1[y==1],x2[y==1],pch=16,col="red")
# generate data
set.seed(2); N = 100
x1 <- runif(n=N, min = 0, max = 10)
x2 <- runif(n=N, min = 0, max = 10)
y <- rep(1,N)
y[x1<4] <- 0; y[x2<4] <- 0
# learn a logistic regression model
model.fit <- glm(y~x1+x2,family="binomial",data=data.frame(y,x1,x2))
# open a plot with a good size
plot(x1,x2,type="n",main="logistic regression decision boundary")
# classify many points, and plot a colored square around each point
res <- 0.1 # resolution of the squares
for (xs1 in seq(0,10,res))
{
for (xs2 in seq(0,10,res))
{
pred <- predict(model.fit,newdata=data.frame(x1=xs1,x2=xs2),type="response")
if (pred>.5)
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(1,0,0,0.5),border=NA)
}
else
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(0,0,1,0.5),border=NA)
}
}
}
# plot the data
points(x1[y==0],x2[y==0],pch=16,col="blue"); points(x1[y==1],x2[y==1],pch=16,col="red")
clear data
set.seed(2); N = 100
x1 <- runif(n=N, min = 0, max = 10)
x2 <- runif(n=N, min = 0, max = 10)
y <- rep(1,N)
y[x1<4] <- 0; y[x2<4] <- 0
# learn a logistic regression model
model.fit <- qda(y~x1+x2,family="binomial",data=data.frame(y,x1,x2))
# open a plot with a good size
plot(x1,x2,type="n",main="logistic regression decision boundary")
# classify many points, and plot a colored square around each point
res <- 0.1 # resolution of the squares
for (xs1 in seq(0,10,res))
{
for (xs2 in seq(0,10,res))
{
pred <- predict(model.fit,newdata=data.frame(x1=xs1,x2=xs2),type="response")
if (pred>.5)
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(1,0,0,0.5),border=NA)
}
else
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(0,0,1,0.5),border=NA)
}
}
}
# plot the data
points(x1[y==0],x2[y==0],pch=16,col="blue"); points(x1[y==1],x2[y==1],pch=16,col="red")
# generate data
set.seed(2); N = 100
x1 <- runif(n=N, min = 0, max = 10)
x2 <- runif(n=N, min = 0, max = 10)
y <- rep(1,N)
y[x1<4] <- 0; y[x2<4] <- 0
# learn a logistic regression model
model.fit <- qda(y~x1+x2,family="binomial",data=data.frame(y,x1,x2))
# open a plot with a good size
plot(x1,x2,type="n",main="logistic regression decision boundary")
# classify many points, and plot a colored square around each point
res <- 0.1 # resolution of the squares
for (xs1 in seq(0,10,res))
{
for (xs2 in seq(0,10,res))
{
pred <- predict(model.fit,newdata=data.frame(x1=xs1,x2=xs2),type="response")
if (pred>.5)
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(1,0,0,0.5),border=NA)
}
else
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(0,0,1,0.5),border=NA)
}
}
}
pred
# generate data
set.seed(2); N = 100
x1 <- runif(n=N, min = 0, max = 10)
x2 <- runif(n=N, min = 0, max = 10)
y <- rep(1,N)
y[x1<4] <- 0; y[x2<4] <- 0
# learn a logistic regression model
model.fit <- lda(y~x1+x2,family="binomial",data=data.frame(y,x1,x2))
# open a plot with a good size
plot(x1,x2,type="n",main="logistic regression decision boundary")
# classify many points, and plot a colored square around each point
res <- 0.1 # resolution of the squares
for (xs1 in seq(0,10,res))
{
for (xs2 in seq(0,10,res))
{
pred <- predict(model.fit,newdata=data.frame(x1=xs1,x2=xs2),type="response")
if (pred>.5)
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(1,0,0,0.5),border=NA)
}
else
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(0,0,1,0.5),border=NA)
}
}
}
# generate data
set.seed(2); N = 100
x1 <- runif(n=N, min = 0, max = 10)
x2 <- runif(n=N, min = 0, max = 10)
y <- rep(1,N)
y[x1<4] <- 0; y[x2<4] <- 0
# learn a logistic regression model
model.fit <- lda(y~x1+x2,family="binomial",data=data.frame(y,x1,x2))
# open a plot with a good size
plot(x1,x2,type="n",main="logistic regression decision boundary")
# classify many points, and plot a colored square around each point
res <- 0.1 # resolution of the squares
for (xs1 in seq(0,10,res))
{
for (xs2 in seq(0,10,res))
{
pred <- predict(model.fit,newdata=data.frame(x1=xs1,x2=xs2)) $posterior[2]
if (pred>.5)
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(1,0,0,0.5),border=NA)
}
else
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(0,0,1,0.5),border=NA)
}
}
}
# plot the data
points(x1[y==0],x2[y==0],pch=16,col="blue"); points(x1[y==1],x2[y==1],pch=16,col="red")
# generate data
set.seed(2); N = 100
x1 <- runif(n=N, min = 0, max = 10)
x2 <- runif(n=N, min = 0, max = 10)
y <- rep(1,N)
y[x1<4] <- 0; y[x2<4] <- 0
# learn a logistic regression model
model.fit <- qda(y~x1+x2,family="binomial",data=data.frame(y,x1,x2))
# open a plot with a good size
plot(x1,x2,type="n",main="logistic regression decision boundary")
# classify many points, and plot a colored square around each point
res <- 0.1 # resolution of the squares
for (xs1 in seq(0,10,res))
{
for (xs2 in seq(0,10,res))
{
pred <- predict(model.fit,newdata=data.frame(x1=xs1,x2=xs2)) $posterior[2]
if (pred>.5)
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(1,0,0,0.5),border=NA)
}
else
{
polygon(x=c(xs1-res/2,xs1+res/2,xs1+res/2,xs1-res/2),
y=c(xs2-res/2,xs2-res/2,xs2+res/2,xs2+res/2),col=rgb(0,0,1,0.5),border=NA)
}
}
}
# plot the data
points(x1[y==0],x2[y==0],pch=16,col="blue"); points(x1[y==1],x2[y==1],pch=16,col="red")
open runDeliveryMan
help(paths)
help(paths.rds)
paths <- readRDS("C:/Users/Bulb/Documents/R/win-library/3.4/DeliveryMan/help/paths.rds")
help(paths)
paths
open(basicDM.Rd)
readRDB(DeliveryMan)
readRDS(features)
features <- readRDS("C:/Users/Bulb/Documents/R/win-library/3.4/DeliveryMan/Meta/features.rds")
features <- readRDS("C:/Users/Bulb/Documents/R/win-library/3.4/DeliveryMan/Meta/features.rds")
help(features.rds)
help(basicDM)
help("basicDM")
run DeliveryMan
run DeliveryMan
run DeliveryMan()
import DeliveryMan
library(DeliveryMan)
runDeliveryMan()
help("basicDM")
basicDM
runDeliveryMan
basicDM
runDeliveryMan
help("runDeliveryMan")
runDeliveryMan(carReady = carmove)
else if (car$y > packages[toGo, 2 + offset]) {
nextMove = 2
}
set workdirectory
setwd(C:\Users\Bulb\Documents\Teknisk Fysik\AI\Project 1 - Delivery Man)
setwd(dir)
setwd
runDeliveryMan(carReady = carmove)
runDeliveryMan(carReady = carmove())
wd
getwd()
setwd(C:/Users/Bulb/Documents/teknisk fysik)
setwd(/Users/Bulb/Documents/teknisk fysik)
setwd(/Users/Bulb/Documents/teknisk fysik)
setwd(C:\Users\Bulb\Documents\Teknisk Fysik\AI\Project 1 - Delivery Man)
getwd()
setwd
getwd
getwd()
setwd()
setwd(C)
setwd(/C)
setwd(:/C)
setwd(C:\Users\Bulb\Documents\Teknisk Fysik\AI\Project 1 - Delivery Man)
setwd("C:\Users\Bulb\Documents\Teknisk Fysik\AI\Project 1 - Delivery Man")
getwd()
setwd("~/Teknisk Fysik/AI/Project 1 - Delivery Man")
getwd()
runDeliveryMan(carReady = carmove())
carmove()
getwd()
list.files
list.files()
runDeliveryMan(carReady = carmove.R())
runDeliveryMan(carReady = carmove())
runDeliveryMan(carReady = carmove
exit
runDeliveryMan(carReady = carmove)
runDeliveryMan(carReady = carmove.R)
getwd()
listwd()
list.files()
test(1)
source("test.R")
test(1)
test(1)
source("test.R")
test(1)
list.files()
source("carmove.R")
runDeliveryMan(carReady = carmove.R)
runDeliveryMan(carReady = carmove)
source("carmove.R")
runDeliveryMan(carReady = carmove)
testDM()
testDM(myFunction = basicDM)
source("carmove.R")
testDM(myFunction = carmove)
runDeliveryMan
frontier = list(list(posx = 1, posy = 1, cost = 0, heur = 5, path = list(1,2,3)))
frontier
frontier(1)
frontier[1]
forntier[2]
frontier[2]
if(3)
quit
if(!1){a ) 3}
if(!1){a = 3}
a
if(!0){a = 3}
a
if(!3){a = 3}
a
a=0
if(!3){a = 3}
a
mylist = list(x=1)
mylist
mylist(2) = 3
mylist(2) = y = 3
mylist
mylist(2)
mylist[2]
mylist[2] = 3
mylist[2]
mylist
mylist = list(x=1)
mylist[1]
mylsit[2]
mylist[2]
mylist[2] = 3
mylist
a = list(list(a,b,c))
frontier = list(list(posx=0, posy=0, cost=0, heur=0, path=list()));
frontier[1]
frontier2 = list(list(x=0,y=0,z=0))
frontier2[1]
frontier[2]$x
frontier[2]$x =0
frontier2[1]$x
frontier2
frontier2[0]
frontier2[0]$x
start_node = 4
start_node
rm(list = ls())
start_node = list(posx=0, posy=0, cost=0, heur=0, path=list());
start_node[1]$posx = car$x;
start_node[1]$posy = car$y;
start_node[1]$cost = 0;
start_node[1]$heur = manhattanDist(car$x,car$y, packages[toGo, 1+offset],packages[toGo, 2+offset]);
frontiner = list(start_node);
source("manhattanDist.R")
start_node = list(posx=0, posy=0, cost=0, heur=0, path=list());
start_node[1]$posx = 1;
start_node[1]$posy = 2;
start_node[1]$cost = 3;
start_node[1]$heur = 4;
frontiner = list(start_node);
start_node
start_node$posx
start_node$posx = 2
start_node$posx
start_node = list(posx=0, posy=0, cost=0, heur=0, path=list());
start_node$posx = car$x;
start_node$posy = car$y;
start_node$cost = 0;
start_node$heur = manhattanDist(car$x,car$y, packages[toGo, 1+offset],packages[toGo, 2+offset]);
frontiner = list(start_node);
start_node = list(posx=0, posy=0, cost=0, heur=0, path=list());
start_node$posx = 1;
start_node$posy = 2;
start_node$cost = 3;
start_node$heur = 4;
frontiner = list(start_node);
frontier
frontiner
frontiner[1]
> start_node2 = list(posx=0, posy=0, cost=0, heur=0, path=list());
> start_node2$posx = 9;
> start_node2$posy = 9;
> start_node2$cost = 9;
> start_node2$heur = 9;
>
start_node2 = list(posx=0, posy=0, cost=0, heur=0, path=list());
start_node2$posx = 9;
start_node2$posy = 9;
start_node2$cost = 9;
start_node2$heur = 9;
start_node2
frontier[2] = start_node2
frontiner[2] = start_node2
frontiner[2]
start_node = list(posx=0, posy=0, cost=0, heur=0, path=list());
start_node$posx = 1;
start_node$posy = 1;
start_node$cost = 1;
start_node$heur =1;
frontier = list(node = start_node);
frontier
start_node = list(posx=0, posy=0, cost=0, heur=0, path=list());
start_node$posx = 2;
start_node$posy = 2;
start_node$cost = 2;
start_node$heur =2;
frontier[2]  = start_node;
frontier
test = list(node = 1)
test
test[[2]]= 2
test
test[[2]]= node
test[[2]]= node = 2
test
node1 = 1
node2 = 2
testy = list(node = node1)
testy
testy[[2]]= node = node2
testy
node1 = 1
test = list(node = node1)
test
node2 = 2
test[[2]]=node2
test
manhattanDist(1,1,3,3)
node1 = list(x=1,y=1)
test = lsit(node = node1)
test = list(node = node1)
test
frontier = list(x=1,y=2,z=3)
length(frontier)
node1 = list(x=1,y=1)
node2 = list(x=2,y=2)
nodelist = list(node1)
nodelist
nodelist = append(nodelist, list(node2))
nodelist
expanded = nodelist[[1]]
expanded
nodelist = nodelist[[-1]]
nodelist
nodelist = append(nodelist, list(node1),0)
nodelist
nodelist
nodelsit = null
nodelist = NULL
nodelist
nodelist = list(node1)
nodelst
nodelist
nodelist = append(nodelist, lsit(node2))
a = list()
a[1]
is.null(a)
is.empty(a)
rm(list = ls())
source("manhattanDist.R")
source("appendSorted.R")
runDeliveryMan(carReady = carmove)
source("carmove.R")
source("carmove.R")
runDeliveryMan(carReady = carmove)
runDeliveryMan(carReady = carmove)
runDeliveryMan(carReady = carmove)
source("carmove.R")
setwd("C:\Users\Bulb\Documents\Teknisk Fysik\AI\Project 1 - Delivery Man" )
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
start_node = list(posx=0, posy=0, cost=0, heur=0, path=list());
frontier = list(start_node);
frontier
expanded = frontier[1]
expanded
expanded$xpos
expanded$posx
expanded = frontier[[1]]
expanded
expanded$posx
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
frontier = list(list())
length(frontier)
node1 = list(x = 1, y = 2)
node2 = list(x=2, y=3)
test = list(node1)
length(test)
test = test[-1]
length(test)
test = list(node1)
test = test[[-1]]
test = list(node1)
test
test[1]$x
test[[1]]$x
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
show("hej")
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
newNode =  list(posx=0, posy=0, cost=0, heur=0, path=list());
show(newNode)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
clear
clear()
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
options(error=traceback)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/appendSorted.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
source('~/Teknisk Fysik/AI/Project 1 - Delivery Man/main.R', echo=TRUE)
