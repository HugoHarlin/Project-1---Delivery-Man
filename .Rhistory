install.packages(xts)
install.packages('xts')
install.packages('normtest')
install.packages('PerformanceAnalytics')
install.packages('ggplot2')
install.packages('reshape2')
install.packages('quantmod')
install.packages('PortfolioAnalytics')
install.packages('robustbase')
install.packages('DEoptim')
1+1
read.csv(hej.csv)
read.csv("hejhej.csv")
z <- read.csv("hejhej.csv")
z
z <- read.csv("hejhej.csv",header=TRUE)
z
z <- read.csv("hejhej.csv",sep=",",header=TRUE)
z
z <- read.csv("hejhej.csv",stringsAsFactors = FALSE,header=TRUE)
z
z <- read.csv("hejhej.csv",stringsAsFactors = FALSE,header=TRUE)
z
z <- read.csv("hejhej.csv",stringsAsFactors = FALSE,header=TRUE)
z
z[0]
z[1]
z[2]
z <- read.csv("hejhej.csv",stringsAsFactors = FALSE,header=TRUE)
z
z <- read.csv("hejhej.csv",header=TRUE)
z
z[0]
z[1]
z <- read.csv("hejhej.csv")
z
setwd("~/")
z <- read.csv("hejhej.csv")
z
z
z <- read.csv("hejhej.csv")
z
z <- read.csv("hejhej.csv",header=TRUE)
z
z <- read.csv("hejhej.csv",header=TRUE)
z
z
z <- read.csv("hejhej.csv",header=TRUE)
z
z[0]
z[1]
z[2]
z <- read.csv("hejhejhej.csv",header=TRUE)
z
z[1]
z <- read.csv("hejhejhej.csv")
z
z
z[1]
z <- read.csv("hejhejhej.csv")
library(tseries)
library(t.series)
setwd("~/")
z <- read.csv("hejhejhej.csv")
z
z <- read.csv("hejhejhej.csv")
z
z
z[1]
z
z
z
library(xts)
setwd("~/")
library(xts)
z <- read.csv("hejhejhej.csv")
z
x <- 2
x
x + x
z
y = 2
y
class(x)
class(y)
z <- x + y
print(z)
z
?class
v <- c(1,2,3,4)
v
v*v
v*2
D <- matrix(1,3,3)
D
D[,1]
D[1,1]
D[1,1]
D[1,-1]
D[-1,]
D[,-3]
b = 2
b
C <- cbind(1,2,3,4,5,6)
C
C <- cbind(1,2,3,4,5,6,7,8,9)
C
cc <- matrix(C,3,3)
cc
C <- rbind(1,2,3,4,5,6,7,8,9)
cc <- matrix(C,3,3)
cc
c = cbind(c(1,2), c(3,4), c(5,6))
c
c = rbind(c(1,2), c(3,4), c(5,6))
c
c = cbind(c(1,2), c(3,4), c(5,6))
c
plot(x = age,y = length, col = 1, pch = 0)
age <- c(0,6,12,18,24)
length <- c(51,67,74,82,88)
plot(x = age,y = length, col = 1, pch = 0)
source('~/testest.R', echo=TRUE)
plot(x = age,y = length, col = 1, pch = 1)
plot(x = age,y = length, col = 1, pch = 2)
plot(x = age,y = length, col = 1, pch = 1)
legend(x = "topleft",legend = "data")
legend(x = "topleft",legend = "data",col=1,pch=1)
X <- cbind(matrix(1,5,1),age)
X
beta <- solve(t(X)%*%X)%*%t(X)%*%length
beta
lengthhat <- beta[1]+age*beta[2]
legend(x = "topleft",legend = c("data","LR"),col=c(1,2),pch=(1,NA), lty=c(NA,1))
legend(x = "topleft",legend = c("data","LR"),col=c(1,2),pch=c(1,NA), lty=c(NA,1))
lines(x=age,y=lengthhat,col=2,lty=1)
infantdata <- data.frame(age,length)
infantdata
data[1]
data(1)
infantdata[1]
infantdata[,1]
infantdata["age"]
plot(x=infantdata$age,y=infantdata$length, col=1,pch=0)
plot(x=infantdata$age,y=infantdata$length, col=1,pch=1)
age <- c(0,6,12,18,24)
length <- c(51,67,74,82,88)
plot(x = age,y = length, col = 1, pch = 1)
X <- cbind(matrix(1,5,1),age)
beta <- solve(t(X)%*%X)%*%t(X)%*%length
lengthhat <- beta[1]+age*beta[2]
lines(x=age,y=lengthhat,col=2,lty=1)
legend(x = "topleft",legend = c("data","LR"),col=c(1,2),pch=c(1,NA), lty=c(NA,1))
model.fit <- lm(formula=length ~ age, data = infantdata)
model.fit
model.pred <- predict(object = model.fit,newdata = infantdata)
model.pred
install.packages("MASS")
library(MASS)
data()
?Boston
names(Boston)
fix(Boston)
boxplot(Boston)
plot(x=Boston$lstat,y=Boston$medv)
model.fit <- lm(formula=medv~lstat,data=Boston)
model.pred <- predict(object = model.fit,newdata = Boston)
lines(Boston$lstat,model.pred,col=2,lty=1)
model2.fit <- lm(formula = medv~lstat+age,data=Boston)
model2.fit
y <- rnorm(n=1000,mean=4,sd=1)
y <- rnorm(n=1000,mean=4,sd=1)
x <- seq(1,1000)
plot(x,y)
nrow(Boston)
train = sample(x=1:nrow(Boston),size=250,replace=FALSE)
train
Boston.train = Boston[train,]
Boston.test = Boston[-train,]
nrow(Boston.test)
nrow(Boston.train)
rm(list=ls())
source('~/testest.R', echo=TRUE)
source('~/testest.R', echo=TRUE)
source('~/testest.R', echo=TRUE)
age <- c(0,6,12,18,24)
length <- c(51,67,74,82,88)
plot(x = age,y = length, col = 1, pch = 1)
X <- cbind(matrix(1,5,1),age)
beta <- solve(t(X)%*%X)%*%t(X)%*%length
lengthhat <- beta[1]+age*beta[2]
lines(x=age,y=lengthhat,col=2,lty=1)
legend(x = "topleft",legend = c("data","LR"),col=c(1,2),pch=c(1,NA), lty=c(NA,1))
infantdata <- data.frame(age,length)
infantdata
infantdata["age"]
plot(x=infantdata$age,y=infantdata$length, col=1,pch=1)
model.fit <- lm(formula=length ~ age, data = infantdata)
model.pred <- predict(object = model.fit,newdata = infantdata)
model.fit
model.pred
model.fit
?biopsy
library("MASS"")
?biopsy
?biopsy
library("MASS"")
?biopsy
library("MASS")
library(MASS)
?biopsy
summary()
summary(biopsy)
print(biopsy)
train = sample(x=1:nrow(biopsy),size=350,replace=FALSE)
biopsy.train = biopsy[train]
biopsy.test = biopsy[-train]
rim(list=ls())
rm(list=ls())
library(MASS)
?biopsy
summary(biopsy)
print(biopsy)
train = sample(x=1:nrow(biopsy),size=350,replace=FALSE)
biopsy.train = biopsy[train]
biopsy.test = biopsy[-train]
train = sample(x=1:nrow(biopsy),size=350,replace=FALSE)
biopsy.train = biopsy[train]
biopsy.test = biopsy[-train]
train = sample(x=1:nrow(biopsy),size=350,replace=FALSE)
biopsy[1]
biopsy
biopsy[1]
train = sample(nrow(biopsy),size=350,replace=FALSE)
biopsy.train = biopsy[train]
train <- sample(nrow(biopsy),size=350,replace=FALSE)
biopsy.train <- biopsy[train]
train <- sample(nrow(biopsy),size=350,replace=FALSE)
biopsy.train <- biopsy[train]
biopsy.test <- biopsy[-train]
?sample
train <- sample(1:nrow(biopsy),size=350,replace=FALSE)
biopsy.train <- biopsy[train]
biopsy.train <- biopsy[train,]
biopsy.test <- biopsy[-train,]
train <- sample(1:nrow(biopsy),size=350,replace=FALSE)
biopsy.train <- biopsy[train,]
biopsy.test <- biopsy[-train,]
glm.fit <- glm(formula = class ~ V3 + V4 + V5,data = biopsy.train, family = binomial)
glm.fit
source('~/.active-rstudio-document', echo=TRUE)
glm.probs <- predict(object = glm.fit,newdata = biopsy.test, typ = "response")
glm.pred <- rep("benign", length(glm.probs))
glm.pred[glm.probs > 0.5] <- "malignat"
table(biopsy.test$class, glm.pred)
lda.fit <- lda(formula = class ~ V3 + V4 + V5,data = biopsy.train)
lda.testdata <- predict(object = lda.fit,newdata = biopsy.test)
lda.pred <- lda.testdata$class
table(biopsy.test$class,lda.pred)
mean(lda.pred = biopsy.test$class)
mean(lda.pred == biopsy.test$class)
30/(30+255+114)
1-30/(30+255+114)
mean(lda.pred == biopsy.test$class)
table(biopsy.test$class,qda.pred)
qda.fit <- qda(formula = class ~ V3 + V4 + V5,data = biopsy.train)
qda.testdata <- predict(object = qda.fit,newdata = biopsy.test)
qda.pred <- qda.testdata$class
table(biopsy.test$class,qda.pred)
mean(qda.pred == biopsy.test$class)
biopsy.train.KNN <- as.matrix(biopsy.train[c("V3","V4","V5")])
biopsy.test.KNN <- as.matrix(biopsy.test[c("V3","V4","V5")])
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test,c1=as.matrix(biopsy.train["class"]),k=1)
library(class)
biopsy.train.KNN <- as.matrix(biopsy.train[c("V3","V4","V5")])
biopsy.test.KNN <- as.matrix(biopsy.test[c("V3","V4","V5")])
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test,c1=as.matrix(biopsy.train["class"]),k=1)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,c1 = as.matrix(biopsy.train["class"]),k=1)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,c1 = as.matrix(biopsy.train["class"]),k=1)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,k=1)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=1)
table(biopsy.test$class,knn.pred)
mean(knn.pred == biopsy.test$class)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=2)
table(biopsy.test$class,knn.pred)
mean(knn.pred == biopsy.test$class)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=3)
table(biopsy.test$class,knn.pred)
mean(knn.pred == biopsy.test$class)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=4)
table(biopsy.test$class,knn.pred)
mean(knn.pred == biopsy.test$class)
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=3)
table(biopsy.test$class,knn.pred)
misclassification <- c()
for (kt in 1:50) {
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=kn)
misclassification[kt] = mean(knn.pred != biopsy.test$class)
}
for (kt in 1:50) {
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=kt)
misclassification[kt] = mean(knn.pred != biopsy.test$class)
}
plot(1:50,misclassification)
for (kt in 1:30) {
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=kt)
misclassification[kt] = mean(knn.pred != biopsy.test$class)
}
plot(1:50,misclassification)
misclassification <- c()
for (kt in 1:30) {
knn.pred <- knn(train = biopsy.train.KNN, test = biopsy.test.KNN,cl = as.matrix(biopsy.train["class"]),k=kt)
misclassification[kt] = mean(knn.pred != biopsy.test$class)
}
plot(1:30,misclassification)
plot(1:30,misclassification,k="l")
plot(1:30,misclassification)
source('~/.active-rstudio-document', echo=TRUE)
points
rm = list(lm())
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pred
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pred
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
DeliveryMan::basicDM()
DeliveryMan::basicDM(car)
DeliveryMan help
help DeliveryMan
help DeliveryMan::basicDM(roads = )
help DeliveryMan::testDM()
library(DeliveryMan)
runDeliveryMan()
help runDeliveryMan()
help runDeliveryMan
help runDeliveryMan()
help DeliveryMan::basicDM()
help basicDM()
help sqrt
help("runDeliveryMan")
source('~/Uppsala/AI/Project 1/testenvironment.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/carmove.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/carmove.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
help("testDM")
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
car = list(x = 1, y = 1, wait = 0, load = 0, nextMove = NA,
mem = list())
packages = matrix(sample(1:10, replace = T, 5 * 5), ncol = 5)
packages[, 5] = rep(0, 5)
packagesleft = which(packages[, 5] == 0)
packagesleft
lengthV = length(packagesleft)
lengthV
packagePaths = vector(mode = "list", length = lengthV)
packagePaths
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
help(testDM)
help("runDeliveryMan")
help(testDM)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
letter[1:3]
letters[1:3]
list(1,2,3,4,5)
library(combinat)
library(combinat)
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
a = matrix(list(permutations(5)),ncol = 5)
a
matrix(letters[permutations(3)],ncol=3)
letters(3)
letters[3]
letters[6]
matrix(letters[permutations(4)],ncol=4)
matrix(letters[permutations(5)],ncol=5)
permutations(3)
permutations(5)
a = permutations(5)
a[1]
a[[1]]
a[1,]
a[2,]
length(a)
length(a[,1])
a[1,]
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source("permutations.R")
a = permutations(5)
a
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
a = permutations(5)
a
matrix(1)
matrix(2)
matrix(2,2)
matrix(2 1 1 ,2 1 1)
matrix(2,2;2,2)
nrow(1)
nrow(2)
nrow(matrix(1))
1>=0
1>=1
1>=2
a = 1 + (1>=0)
a
a = 1 + (1>=2)
a
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
source('~/GitHub/Project-1-Delivery-Man/main.R', echo=TRUE)
